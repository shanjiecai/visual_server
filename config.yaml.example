# 视频流处理服务配置文件示例
# 复制此文件为 config.yaml 并根据需要修改配置

# 服务配置
service:
  name: "video_stream_service"
  version: "1.0.0"
  host: "localhost"
  port: 8080
  worker_count: 4
  max_queue_size: 100
  health_check_interval: 30.0
  metrics_collection_interval: 60.0

# 摄像头配置（用于demo.py）
camera:
  camera_index: 0        # 摄像头索引，0为默认摄像头
  fps: 1.0              # 每秒捕获帧数，建议1-2帧避免过于频繁
  resolution: [640, 480] # 分辨率 [宽度, 高度]

# 视频源配置（扩展配置，暂未使用）
video_source:
  source_type: "camera"  # 支持: mock, file, camera, rtmp, webrtc
  source_path: null      # 视频文件路径或摄像头设备ID
  fps: 30.0
  max_frames: null       # null表示无限制
  loop: false            # 是否循环播放（仅对文件有效）
  config:
    # WebRTC配置示例
    url: "http://example.com/webrtc/stream"
    max_frames_buffer: 1
    connection_timeout: 10
    # 视频源特定配置
    quality: "high"
    buffer_size: 10

# 预处理器配置
preprocessors:
  # 内存提取器（暂未启用）
  memory_extractor:
    enabled: false
    processor_type: "memory_extractor"
    batch_size: 1
    max_concurrent: 2
    timeout: 30.0
    config:
      extraction_method: "feature_based"
      memory_threshold: 0.7
  
  # YOLO目标检测器
  yolo_detector:
    enabled: true
    processor_type: "yolo_detector"
    batch_size: 4
    max_concurrent: 2
    timeout: 15.0
    model_path: "models/yolo-v8l-seg.pt"  # YOLO模型路径，请确保文件存在
    device: "cpu"                         # 使用设备: cpu 或 cuda
    confidence_threshold: 0.5             # 置信度阈值
    nms_threshold: 0.4                    # 非极大值抑制阈值
    target_classes: ["person"]           # 目标检测类别，专注于人员检测
    enable_downstream: true               # 启用下游处理（发送到VLM）
    
    # 任务配置 - 定义不同检测场景的提示词
    task_configs:
      person_detection:
        system_prompt: |
          你是一个友好的智能助手，当检测到有人出现时，需要用温暖友好的语气向他们打招呼。
          
          请根据图像中人员的情况（人数、位置等），生成合适的问候语。
          保持语气自然、友好、热情。
        user_prompt: "你好！我看到有人出现在画面中，请向他们打个招呼吧。"
        task_type: "person_detection"
      
      object_detection:
        system_prompt: |
          你是一个专业的物体检测和场景分析专家。请分析图像中的物体和场景信息。
          
          请重点关注：
          1. 物体的类型和位置
          2. 物体的状态和条件
          3. 场景的整体布局
          4. 物体之间的关系
        user_prompt: "请分析图像中的物体和场景，描述物体的类型、位置和相互关系。"
        task_type: "object_detection"
      
      general_analysis:
        system_prompt: |
          你是一个专业的视觉分析专家。请对图像进行全面的分析和描述。
          
          请重点关注：
          1. 场景的整体描述
          2. 重要物体和人员
          3. 环境和氛围
          4. 值得注意的细节
        user_prompt: "请对这张图像进行全面分析，描述你观察到的内容。"
        task_type: "general_analysis"
  
  # Mask2Former分割器（可选）
  mask2former:
    enabled: false  # 暂时关闭，简化流程
    processor_type: "mask2former"
    batch_size: 2
    max_concurrent: 1
    timeout: 45.0
    config:
      model_path: "models/mask2former.pt"
      classes: ["person", "vehicle", "background"]
  
  # 相似帧过滤器
  similar_frame_filter:
    enabled: true
    processor_type: "similar_frame_filter"
    batch_size: 1
    max_concurrent: 4
    timeout: 10.0
    similarity_threshold: 0.8              # 相似度阈值，越高越严格
    comparison_method: "clip"              # 比较方法: clip, histogram, ssim
    clip_model_path: "models/clip-vit-base-patch32"  # CLIP模型路径
    history_size: 5                        # 历史帧缓存大小
    min_time_interval: 0.5                 # 最小时间间隔（秒）

# 队列配置（扩展配置）
queue:
  queue_type: "kafka"  # 支持: memory, rabbitmq, kafka
  max_size: 1000
  timeout_default: 30.0
  serialize_messages: true
  use_priority: true
  cleanup_interval: 300

# 消息队列配置（实际使用）
message_queue:
  type: "kafka"  # 使用Kafka队列
  config:
    bootstrap_servers: ["localhost:9092"]  # Kafka服务器地址
    topic_name: "demo"                     # 主题名称，需与worker配置一致
    consumer_group: "demo"                 # 消费者组
    use_kafka: true                        # 设为false则使用内存队列
    max_request_size: 10485760             # 10MB，最大消息大小

# 缓存配置
cache:
  cache_type: "frame"  # 支持: memory, lru, frame
  max_size: 1000
  default_ttl: 3600    # 1小时，默认生存时间
  serialize_values: true
  config:
    frame_ttl: 1800      # 视频帧缓存30分钟
    result_ttl: 3600     # 处理结果缓存1小时
    max_frame_size: 500
    max_result_size: 1000
    cleanup_interval: 300

# 日志配置
logging:
  level: "INFO"  # 日志级别: DEBUG, INFO, WARNING, ERROR
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  file_path: "logs/video_stream.log"  # 日志文件路径
  max_file_size: 10485760             # 10MB，日志文件最大大小
  backup_count: 5                     # 保留的备份日志文件数量
  console_output: true                # 是否输出到控制台

# 后处理器配置
postprocessors:
  # 打招呼打印器
  greeting_printer:
    enabled: true
    processor_type: "greeting_printer"
    timeout: 5.0
    max_retries: 1
    trigger_conditions:
      - type: "detection_threshold"
        threshold: 1                    # 检测到至少1个人时触发
      - type: "task_type"
        task_types: ["person_detection"] # 仅对人员检测任务触发
    greeting_config:
      print_format: "🤖 AI打招呼: {content}"
      include_metadata: true
      show_person_count: true

# 插件配置（扩展功能）
plugins: {}

# 使用说明：
# 
# 1. 快速开始（前台运行，开发调试）：
#    python main.py run demo                    # 运行演示程序
#    python main.py run worker                  # 运行VLM工作进程
#    python main.py run both                    # 同时运行两者
#
# 2. 生产环境（后台运行）：
#    python main.py start demo                  # 后台启动演示程序
#    python main.py start worker               # 后台启动VLM工作进程
#    python main.py stop                       # 停止所有组件
#    python main.py status                     # 查看运行状态
#
# 3. 配置要求：
#    - 确保 models/ 目录下有相应的模型文件
#    - 如果使用Kafka，确保Kafka服务正在运行
#    - 日志文件会自动创建在 logs/ 目录下
#    - 摄像头索引根据系统实际情况调整
#    - 可以通过修改 fps 来控制处理频率 